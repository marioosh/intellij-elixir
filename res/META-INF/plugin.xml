<idea-plugin version="2">
  <id>org.elixir_lang</id>
  <name>Elixir</name>
  <version>3.0.1</version>
  <vendor email="Kronic.Deth@gmail.com">Luke Imhoff</vendor>

  <description><![CDATA[
      Elixir plugin
    ]]></description>

  <change-notes><![CDATA[
      <h1>v3.0.1</h1>
      <ul>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>
               Use the error reporter logger instead of plain <code>assert</code> in <code>Prefix#operator</code>.
               <strong>
                 NOTE: This does not address error recovery recovery since I don't have a regression test case.
               </strong>
            </li>
            <li>
              All function name elements act as <code>PsiNameIdentifier</code>s now even if they don't resolve, but that
              means they all need to support <code>FindUsagesProvider#getType</code>, which they don't, so use a
              placeholder of "unknown call type" for any <code>Call</code> that can't be matched and "unknown element"
              for anything else.
            </li>
            <li>
              Enumerate all Kernel Functions, Macros, and Special Forms in the Syntax Highlighting section of the
              README, so that users searching for which category controls highlighting a given call can find it.
            </li>
          </ul>
        <li>
      </ul>
      <h1>v3.0.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>Go To Symbol (&#8997;&#8984;O)</p>
              <ul>
                <li>
                  Call definition clauses (<code>def</code>, <code>defp</code>, <code>defmacro</code>, and
                  <code>defmacrop</code>)
                </li>
                <li>Callbacks (<code>@callback</code> and <code>@macrocallback</code>)</li>
                <li>Call definition specifications (<code>@spec</code>)</li>
                <li>
                  Call definition heads (<code>foo(bar)</code>) for delegation
                  (<code>defdelegate foo(bar), to: BAZ</code>)
                </li>
                <li>Implementations (<code>defimpl</code>)</li>
                <li>Protocols (<code>defprotocol</code>)</li>
              </ul>
            </li>
            <li>
              Go To Declaration for Aliases now uses the same <code>isModular</code> checks as the stubbing for the index uses for
              Go To Symbol.
            </li>
            <li>Build against 14.0, 14.1, 15.0, and 2016.1 on travis-ci to ensure continued compatibility.</li>
            <li>
              Error reporting for type highlighter gives the Class, Excerpt and Full Text when an unknown element type
              is encountered as the Excerpt alone is not enough sometimes.
            </li>
            <li>
              Custom error handling that will open an issue against https://github.com/KronicDeth/intellij-elixir with
              the exception messsage and stacktrace filled in.
            </li>
            <li>
              Changed <code>NotImplementedExceptions</code> and (some) <code>assert</code>s to logging custom error
              message that include the <code>PsiElement</code> text and the containing file as an attachment.  The files
              make the URL too big for the error handler to put the file contents in when opening the browser with the
              error handler, so the issue body instead explains how to get the attachment text out of IntelliJ's
              "IDE Fatal Errors"
            </li>
            <li>Update to Grammar Kit 1.3.0</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Fix Elixir Mix Run configuration not persisting past restart</li>
            <li>
              Allow <code>Infix#operator</code> to work on operations with errors, which eliminates the
              <code>AssertionError</code> reported when typing infix operation and they are incomplete.
            </li>
            <li>
              Add Keywords to the Preferences &gt; Editor &gt; Colors & Fonts &gt; Elixir settings page, so it can be
              customized for just Elixir instead of having to change Preferences &gt; Editor &gt; Colors & Fonts &gt;
              General &gt; Keyword.
            </li>
            <li>
              <p>Use <code>TextAttributesKey</code>s that aren't deprecated in 2016.1 and work back to 14.1</p>
              <p>
                All of <code>CodeInsightColors</code> is deprecated, so all constants from there had to be replaced.
                Unfortunately, the recommended replacements don't have the same color as the original, so I used
                different <code>DefaultLanguageHighlighterColors</code> constants for some.
              </p>
              <p>
                "Module Attribute" is now based on <code>DefaultLanguageHighlighterColors.CONSTANT</code> (which is
                purplish in Darcula) instead of the recommended <code>METADATA</code>, which is yellow.  Although module
                attributes don't have to be constant since they can be set to accumulate, often they are used as
                constants and not really as metadata, since they are just data then.  All the <code>metadata</code> uses
                of module attributes have a separate color.
              </p>
              <p>
                "Specification" is now based on <code>DefaultLanguageHighlighterColors.FUNCTION_DECLARATION</code>,
                which maintains the golden color that <code>CodeInsightColors.METHOD_DECLARATION_ATTRIBUTES</code> had.
              </p>
              <p>
                "Type" is now based on <code>DefaultLanguageHighlighterColors.METADATA</code>, which is bright yellow
                unlike <code>CodeInsightColors.ANNOTATION_ATTRIBUTE_NAME_ATTRIBUTES</code>, which was a bright white.
              </p>
              <p>
                "Type Parameter" is now based on <code>DefaultLanguageHighlighterColors.PARAMETER</code>, which
                unfortunately has no attributes associated with it, but the constant name was too good a fit not to use,
                so if you want the old color, you'll need to customize it yourself.
              </p>
            </li>
            <li>
              <p>Restore compatibility with the IntelliJ IDEA 14.0 release line</p>
              <ul>
                <li>
                  By using reflection to call <code>FileTemplateManager#getInstance</code> if
                  <code>FileTemplateManager#getDefaultInstance</code> is not available
                </li>
                <li>
                  By calling <code>FileChooserDescriptorFactory#createSingleLocalFileDescriptor</code> (which works in
                  14.0 through 2016.1) instead of <code>FileChooserDescriptorFactory#createSingleFileDescriptor</code>
                  (which only works in 14.1 through 2016.1)
                </li>
              </ul>
            </li>
            <li>
              Instead of showing the regular expression pattern, which may be confusing to new developers, explain in
              English the expected pattern. I also included the description, which explains how nesting is mapped to
              directories, of the action since it doesn't actually show up in the dialog otherwise.
            </li>
            <li>
              Check if a file exists before allowing Elixir Module to be created. If it exists, show an error with the
              conflicting path.
            </li>
            <li>
              Fix (one cause) of <code>AssertionError</code> in <code>GoToSymbolContributor</code> when the
              <code>Modular</code> (<code>defimpl</code>, <code>demodule</code>, <code>defprotocol</code>, and
              <code>quote</code>) could not be resolved due a <code>def</code> being surrounded by a <code>for</code>
              comprehension, which is common in Elixir libraries as was the case for <code>Postgrex</code>: any
              enclosing <code>for</code> comprehension(s) will now be ignored and the next enclosing macro will be
              checked to see if it is a <code>Modular</code>.
            </li>
            <li>
              While typing before <code>:</code> in keyword pairs after the <code>when</code>, such as in
              <code>@spec foo(id) :: id when id</code> before finishing typing
              <code>@spec foo(id) :: id when id: String.t</code>, the keyword key will be properly highlighted as a
              Type Parameter.
            </li>
            <li>
              Properly handle the <code>Infix#rightOperand</code> being <code>null</code> due to the Pratt Parser
              matching up through the operator and then ignoring the mismatched right operand, which leads to the
              <code>Infix</code> having only 2 elements: the left operand and the operator.
            </li>
            <li>
              <code>@doc</code> and other module attributes appearing as the right operand of <code>@type name ::</code>
              will be ignored as it is common when adding a new type above pre-existing, documented functions.
            </li>
            <li>
              Only error in <code>Infix#leftOperand</code> if there are not 2-3 children for <code>Infix</code> instead
              of a strict 3.
            </li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              Drop support for IntelliJ 14.0 because the parser generated by Grammar Kit 1.3.0 is not compatible with
              the OpenAPI libraries shipped in IntelliJ 14.0.  Still compatible with 14.1 through 2016.1.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v2.2.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>Code Commenter</li>
            <li>
              <p>Structure View</p>
              <ul>
                <li>
                  <p>Controls</p>
                  <ul>
                    <li>Scroll to Source and Scroll From Source</li>
                    <li>
                      <p>Sorting</p>
                      <ul>
                        <li>Runtime (functions) vs Compile (macros)</li>
                        <li>
                          Visibility (public [<code>def</code>, <code>macro</code>, etc] vs private
                          [<code>defp</code>, <code>macrop</code> and <code>@typep</code>]
                        </li>
                        <li>Alphabetical</li>
                      </ul>
                    </li>
                    <li>
                      Show Used - injects structure from <code>use Alias</code> call's <code>__using__</code>'s
                      <code>quote<code> into the call site Structure
                    </li>
                  </ul>
                </li>
                <li>
                  <p>Elements</p>
                  <ul>
                    <li>Callbacks (<code>@callback</code>) show their name/arity and then a nest spec</li>
                    <li>CallDefinition groups together CallDefinitionClause of the same name/arity</li>
                    <li>
                      CallDefinitionClause (<code>def</code>, <code>defp</code>, <code>macro</code>, and
                      <code>macrop</code>) shows the head of each definition under the CallDefinition.
                    </li>
                    <li>
                      CallDefinitionSpecification (<code>@spec</code>) show the type specification for a CallDefinition
                    </li>
                    <li>
                      CallReference <code>name: arity</code> shows the name/arity for a <code>defoverridable</code>.
                    </li>
                    <li>
                      Delegation shows all the <code>:append_first</code> and <code>:to</code> options with the implied
                      Function Delegation nested underneath
                    </li>
                    <li>
                      Exception (<code>defexception</code>) show the implicit struct and nest any callback functions,
                      such as <code>exception/1</code> or <code>message/1</code>.
                    </li>
                    <li>
                      Overridable <code>defoverridable</code> tracks overridable functions and is used to mark
                      CallDefinitions are overrides.
                    </li>
                    <li>
                      Quote <code>quote do end</code> models quote blocks so they can be injected <code>use Alias</code>
                      sites.
                    </li>
                    <li>Use <code>use Alias</code> show <code>use</code> calls.</li>
                  <ul>
                </li>
              </ul>
            </li>
            <li>Live Templates</li>
            <li>
              Added clarification to "Import Project from External Model" that <code>mix.bat</code> should be used
              instead of <code>mix</code>
            </li>
            <li>
              Get the Elixir version directly from <code>System.build_info[:version]</code> instead of processing the
              formatted output of <code>elixir --version</code> as the build info version is more stable
            </li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>
              Elixir version parsing handles both pre and build numbers if present by using the same regular expression
              as Elixir itself uses for the <code>Version</code> module
            </li>
            <li>Better error handing in Structure View</li>
          </ul>
        </li>
      </ul>
      <h1>v2.1.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li><code>\u</code> in strings and char lists for unicode mapping</li>
            <li>Test against Elixir 1.1.1 and 1.2.0</li>
            <li>
              More flexible <code>elixir --version</code> parsing: works with <code>elixir</code> 1.2.0 and earlier
            </li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Update IntelliJ to 14.1.6 to fix 403 errors in Travis-CI build</li>
          </ul>
        </li>
      </ul>
      <h1>v2.0.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>Highlighters for</p>
              <ul>
                <li>Kernel Functions</li>
                <li>Kernel Macros</li>
                </li>Kernel.SpecialForms Macros</li>
              </ul>
            </li>
            <li>Test against Elixir v1.1.1</li>
            <li>
              Highlight <code>after</code>, <code>catch</code>, <code>do</code>, <code>else</code>, <code>end,
              </code>fn<code>, and </code>rescue` as keywords.
            </li>
            <li>
              <p>Annotate Module Attributes</p>
              <ul>
                <li>
                  Documentation module attributes (<code>@doc</code>, <code>@moduledoc</code>, and
                  <code>@typedoc</code>) are annotated as "Documentation Module Attributes" while all other module
                  attributes are annotated as "Module Attributes".
                </li>
                <li>
                  The string or heredoc argument to a documentation module attribute (<code>@doc</code>,
                  <code>@moduledoc</code>, and <code>@typedoc</code>) is annotated as "Documentation Text"
                </li>
                <li>
                  Function names passed to <code>@callback</code>, <code>@macrocallback</code> or
                  <code>@spec</code> are annotated as "Specification".
                </li>
                <li>
                  Variables/calls in the parameters and return of <code>@callback</code>, <code>@macrocallback</code>,
                  <code>@spec</code> are annotated as "Type".
                </li>
                <li>
                  Parameters of <code>@opaque</code>, <code>@type</code>, <code>@typep</code> names are annotated as
                  "Type Parameter"
                </li>
                <li>
                  Keyword keys from the <code>when</code> clause of <code>@callback</code>, <code>@macrocallback</code>
                  or <code>@spec</code> definitions and their usage are annotated as "Type Parameters"
                </li>
                <li>
                  <code>@doc false</code>, <code>@moduledoc false</code>, and <code>@typedoc false</code> will annotate
                  the <code>false</code> with a weak warning: "Will make documented invisible to the documentation
                  extraction tools like ExDoc.".
                </li>
              </ul>
            </li>
            <li>
              <p>Module Attribute resolution and refactoring</p>
              <ul>
                <li>Go To Definition for module attributes.</li>
                <li>Module attribute completion</li>
                <li>
                  Module attributes that can't be resolved will have "Unresolved module attribute" error annotation
                  (i.e. red squiggly underline).
                </li>
                <li>Find Usages of module attributes from their declarations.</li>
                <li>
                  Rename module attributes inline (editing the name in the declaration will change the name at the usage
                  site at the same time without a dialog).
                </li>
                <li>
                  The module attribute value (from the declaration site) will be folded into the usage site.  It can be
                  reverted to the literal <code>@module_name</code> text by clicking the + to unfold.
                </li>
              </ul>
            </li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Change "edition" to "addition" in README.</li>
            <li>
              Sped up reparsing when [ENTER] is hit in the middle of comment by removing the custom error handling
              element, adjacentExpression, and going with the default error handling provided by JetBrains' OpenAPI.
            </li>
            <li>
              Fix <code>mix</code> version detection on Windows.
            </li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              Removed "Add Newline" Quick Fix as it depended on <code>adjacentExpression</code> elements, which have now
              been removed to speed up error handling when comments become code.
            </li>
            <li>
              Removed "Add Semicolon" Quick Fix as it depended on <code>adjacentExpression</code> elements, which have
              now been removed to speed up error handling when comments become code.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v1.2.1</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              Keywords not at the end of no parentheses calls will be properly marked as errors.
            </li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p
          <ul>
            <li>
              Fix <code>IllegalStateException</code> for file delete and rename by giving <code>ElixirFile</code>s
              descriptive names for safe-refactoring displaying file usage.
            </li>
            <li>
              README states explicitly that the plugin works with *both* IntelliJ Community and Ultimate.
            </li>
            <li>
              README states that the plugin is free.
            </li>
            <li>
              Prevent match error when typing <code>~</code> to start a sigil that is followed later by a
              <code>\n</code> by matching <code>EOL</code> in the <code>NAMED_SIGIL</code> state as a
              <code>BAD_CHARACTER</code>.
            </li>
            <li>
               Keywords at the end of a no parentheses call that is surrounded by parentheses will not be marked as an
               error when that parenthetical group appears in the middle of an outer call.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v1.2.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              If (1) you have intellij-erlang installed and (2) you have an atom in Erlang that starts with
              <code>Elixir.</code>, such as <code>'Elixir.Test'</code>, then intellij-elixir will annotate whether it
              can resolve the name to a <code>defmodule</code> call in Elixir files.
            </li>
            <li>
              Default SDK path for Linux and Windows.
            </li>
            <li>
              Go To Declaration (<code>Cmd+Click</code>, <code>Cmd+B</code>, </code>Navigate > Declaration</code>) from
              Alias to <code>defmodule</code> where Alias is declared.
            </li>
            <li>
              Index <code>defmodule</code>s for fast Go To Declaration in
              <a href="https://github.com/elixir-lang/elixir">
                <code>elixir-lang/elixir</code>
              </a>
              and other large projects.
            </li>
            <li>
              Find Usage for Alias in <code>defmodule</code>
            </li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Fi links to screenshots in README</li>
          </ul>
        </li>
      </ul>
      <h1>v1.1.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>
                <code>Build</code>
              </p>
              <ul>
                <li><code>Compile</code> an individual file</li>
                <li><code>Make Project</code> to build the entire project</li>
              </ul>
            </li>
            <li>
              <p>
                <code>New</code>
              </p>
              <ul>
                <li>
                  <p>
                    <code>Elixir File</code> has new templates
                  </p>
                  <ul>
                    <li>
                      <code>Empty module</code>
                    </li>
                    <li>
                      <code>Elixir Application</code>
                    </li>
                    <li>
                      <code>Elixir Supervisor</code>
                    </li>
                    <li>
                      <code>Elixir GenServer</code>
                    </li>
                    <li>
                      <code>Elixir GenEvent</code>
                    </li>
                  <ul>
                </li>
                <li>
                  <code>Project > Elixir</code> creates a new Elixir project with an empty <code>lib</code> directory
                  marked as source directory.
                </li>
                <li>
                  <p>
                    <code>Project from Existing Sources... </code>
                  </p>
                  <ul>
                    <li>
                       <code>Create project from existing sources</code> sets up the project with SDK using a
                       pre-existing directory.
                    </li>
                    <li>
                      <p>
                        <code>Import project from external model > Mix</code>
                      </p>
                      <ul>
                        <li>Fetches the the dependencies with the local version of <code>mix</code></li>
                        <li>Marks <code>lib</code> directory as source</li>
                        <li>Marks <code>test</code> directory as test sources</li>
                      </ul>
                    </li>
                  </ul>
                </li>
              </ul>
            </li>
            <li><code>Run > Elixir Mix</code> to setup Run Configurations to run <code>mix</code> tasks.</li>
          </ul>
        </li>
      </ul>
      <h1>v1.0.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>Update ant build on travis-ci.org to use IDEA 14.1.4 (from 14.0.2)</li>
            <li>Parser is verified to quote the same as native Elixir</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Fix parsing of unary vs binary +/- with leading and trailing spaces and newlines</li>
            <li>Allow EOL between list arguments and <code>]</code></li>
            <li>
              Relative identifiers after <code>.</code> that start with <code>and</code>, <code>or</code>, and
              <code>not</code> will be lexed as a single identifier instead of <code>and</code>, <code>or</code>, or
              <code>not</code> followed by another identifier.
            </li>
            <li><code>end</code> is allowed as a relative identifier after <code>.</code></li>
            <li>Fix <code>(...)</code> as part of matched expression in no parentheses stab signature</li>
            <li>Allow multiple newlines to mark the end of an expression, but only one <code>;</code></li>
            <li>
              Allow operators in function references (<code>&lt;op&gt;/&lt;arity&gt;</code>) for function captures
              (<code>&amp;&lt;op&gt;/&lt;arity&gt;</code>)
            </li>
            <li><code>unquote_splicing</code> is properly wrapped in <code>__block__</code> when in stab bodies</li>
            <li>Check for matching terminator in heredocs when determining white space type at beginning of line</li>
            <li>Allow &lt;space&gt;+&lt;EOL&gt; to count as addition</li>
            <li>Unary expressions inside parentheses are no longer marked <code>ambiguous_op: nil</code></li>
            <li>
              Differentiate between <code>Qualifier.'relative'()</code> vs <code>Qualifier.'relative' ()</code> and
              <code>Qualifier."relative"()</code> vs <code>Qualifier."relative" ()</code>
            </li>
            <li>Fix link to Elixir website in README</li>
            <li>All tokens have human-readable names and/or expected characters for better error messages</li>
          </ul>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              New Elixir File has moved to the last item in the New File menu to preserve <code>CTRL+N ENTER</code>
              keyboard shortcut for <code>New &gt; File</code>
            </li>
          </ul>
        </li>
      </ul>
      <h1>0.3.5</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li><code>do</code> blocks (<code>do end</code>)</li>
            <li>Unmatched expressions (operations involving <code>do</code> block calls and normal matched expressions)</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Lex full atom instead of just identifier-like operator prefix (<code>:in<nospace>dex</code> before vs <code>:index</code> after)</li>
            <li><code>!</code> and <code>not</code> are properly wrapped in <code>__block__</code>s when in stab bodies</li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.4</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>Bracket at expression (<code>@foo[key]</code>)</li>
            <li>Anonymous functions (<code>fn end</code>), stab clauses (<code>-&gt;</code>), and parentheticals (<code>1 + 2</code>)</li>
            <li>Maps (<code>%{}</code>) and structs (<code>%User{}</code>)</li>
            <li>Tuples (<code>{}</code>)</li>
            <li>Bit Strings (<code>&lt;&lt;&gt;&gt;</code>)</li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.3</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>Remote function calls (<code>Alias.function</code>, <code>:atom.function</code>, etc) and local function calls (<code>function</code>) with...</p>
              <ul>
                <li>
                  <p>No Parentheses with...</p>
                  <ul>
                    <li>No Arguments (<code>Alias.function</code>)</li>
                    <li>Keywords (<code>Alias.function key: value</code>)</li>
                    <li>
                      Nested No Parentheses Call (<code>Alias.function Inner.function positional, key: value</code>)
                    </li>
                    <li>Positional and Keyword arguments (<code>Alias.function positional, key: value</code>)</li>
                    <li>Matched Expression (<code>Alias.function 1 + 2</code>)</li>
                  </ul>
                </li>
                <li>
                  <p>Parentheses with...</p>
                  <ul>
                    <li>No arguments (<code>Alias.function()</code>)</li>
                    <li>No Parentheses Call (<code>Alias.function(Inner.function positional, key: value</code>)</li>
                    <li>Keywords (<code>Alias.function(key: value)</code>)</li>
                    <li>Positional and Keyword arguments (<code>Alias.function(positional, key: value)</code>)</li>
                    <li>Trailing parentheses for quoting (<code>def unquote(variable)(positional)</code>)</li>
                  </ul>
                </li>
              </ul>
            </li>
            <li>Bracket expressions (<code>foo[key]</code>)</li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.2</h1>
      <ul>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>
              Fix
              <code>
                NoSuchElementException
              </code>
              when no suggested SDK home paths are available.  Thanks to
              <a href="https://github.com/zyuyou">
                zyuyou
              </a>
              for
              <a href="https://github.com/KronicDeth/intellij-elixir/issues/120">
              reporting
              </a>
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.1</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              File &gt; New &gt; Project From Existing Sources can be used in IntelliJ to setup the excludes, sources, tests,
              SDK and libraries for an Elixir project that has already been created with <code>mix new</code>.
            </li>
            <li>
              Operators can be qualified function names.
            </li>
            <li>
              Anonymous function calls (<code>.(...)</code>)
            </li>
            <li>
              Inspection that marks errors when keywords aren't at end of list.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <code>\x</code> is marked an error in CharLists, CharList Heredocs, Strings, and String Heredocs, but not
              in any sigils.
            </li>
            <li>
              New Elixir File will automatically underscore the camel case module name when creating the file name and
              will convert qualifying aliases before the last <code>.</code> to directories.
            </li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              New Elixir File validates that the name is a valid Alias, so each <code>.</code> separated part must start with a
              capital letter.  Previous New Elixir File validated that the name was a valid path, and so forced the name
              to be lowercase.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.2.1</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              No parentheses function calls can occur as the right operand in binary infix operations or the sole
              operand of unary prefix operation.
            </li>
            <li>
              Function calls with neither parentheses nor <code>do</code> blocks that have at least 2 arguments: a
              positional argument and keyword arguments or 2 or more positional argument(s) followed by optional keyword
              arguments.
            </li>
            <li>Inspection that marks errors for ambiguous commas</li>
            <li>Inspection that marks errors for ambiguous parentheses</li>
            <li>Quick Fix for the ambiguous parentheses to remove the space between the function name and the opening parentheses.</li>
            <li>Inspection that marks errors for missing end-of-expressions (<code>;</code> and newlines) between expressions.</li>
            <li>Quick Fix to insert <code>;</code> for missing end-of-expression.</li>
            <li>Quick Fix to insert newline for missing end-of-expression.</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Right hand-side of dot_alias and dot_identifier was translated incorrectly. Only Aliases and Identifiers are allowed now.</li>
          </ul>
        </li>
      </ul>
      <h1>v0.2.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>New attributes for parts of numbers on Color Settings Page</p>
              <ul>
                <li>Binary, Decimal, Hexadecimal, and Octal Digits</li>
                <li>Decimal Exponent, Mark, and Separator</li>
                <li>
                  <p>Invalid Binary, Decimal, Hexadecimal, and Octal Digits</p>
                  <ul>
                    <li>2-9, A-Z, and a-z will be parsed as invalid binary digits</li>
                    <li>8-9, A-Z, and a-z will be parsed as invalid octal digits</li>
                    <li>G-Z and g-z will be parsed as invalid hexadecimal digits</li>
                  </ul>
                </li>
                <li>
                  <p>Non-Decimal Base Prefix</p>
                  <ul>
                    <li>Any letter other than b, o, or x, in either case, will be recognized as an invalid whole number base</li>
                  </ul>
                </li>
                <li>Obsolete Non-Decimal Base Prefix (<code>B</code> for binary and <code>X</code> for hexadecimal)</li>
              </ul>
            </li>
            <li>Any digit, 0-9, A-Z, or a-z will be parsed as invalid for invalid whole number based numbers</li>
            <li>Recovery for non-decimal whole numbers if the prefix is given, but no digits are given</li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>Recovery for non-decimal whole numbers if the prefix is given, but no digits are given</li>
          </ul>
        </li>
      </ul>
      <h1>v0.1.4</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>All valid escape sequences (<code>\&lt;character&gt;</code>, <code>\x&lt;hexadecimal&gt;</code>, <code>\x{&lt;hexadecimal&gt;}</code>,) are recognized.</li>
            <li>Support for creation of Elixir modules</li>
            <li>Use pygments' elixir_example.ex supplied by Alexei Sholik for Color Settings Page.</li>
            <li><code>?</code> before any character or valid escape sequence will be recognized as a character token.</li>
            <li><code>;</code> is recognized as EOL. <code>\r\n</code> and <code>\n</code> style EOL can be escaped with <code>\</code> and will be treated as whitespace.</li>
            <li>Operator arity, associativity, and precedence</li>
            <li>Decimal integers and floats</li>
            <li>Identifiers (variable, function, and macro names)</li>
            <li><code>...</code> identifier</li>
            <li>Aliases (module names)</li>
            <li>Keyword Identifiers</li>
            <li>Empty Parentheses</li>
            <li>In Operator</li>
            <li>Dot Operator</li>
            <li>Keyword Lists</li>
            <li>Matched Expressions</li>
            <li>Regular Keywords (<code>end</code>, <code>false</code>, <code>fn</code>, <code>nil</code>, and <code>true</code>)</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Sigil terminator escapes are recognized, so that sigils are no longer prematurely terminated.</li>
            <li>Comments do not consume EOL, so trailing comments don't cause error parsing expression on following line.</li>
            <li>Sigil modifiers now work on groups in addition to heredocs.</li>
            <li><code>;</code> is separate from <code>EOL</code> and either or both can separate expressions, but only <code>EOL</code> can separate operators and operands for operations</li>
          </ul>
         </li>
      </ul>
    ]]>
  </change-notes>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
  <!-- 141 == IntelliJ IDEA 14.1, which is the oldest version compatible with GrammarKit 1.3.0 -->
  <idea-version since-build="141"/>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>
  <depends config-file="intellij-erlang-plugin.xml" optional="true">org.jetbrains.erlang</depends>
  <depends config-file="rich-platform-plugin.xml" optional="true">com.intellij.modules.java</depends>

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="org.elixir_lang.errorreport.Submitter"/>

    <!-- Elixir Module Structure -->
    <sdkType implementation="org.elixir_lang.sdk.ElixirSdkType"/>

    <moduleConfigurationEditorProvider implementation="org.elixir_lang.module.DefaultModuleEditorsProvider" order="first"/>

    <editorNotificationProvider implementation="org.elixir_lang.inspection.SetupSDKNotificationProvider"/>

    <!-- Mix related extensions -->
    <projectConfigurable instance="org.elixir_lang.settings.ElixirExternalToolsConfigurable" />
    <projectService serviceImplementation="org.elixir_lang.mix.settings.MixSettings" />
    <programRunner implementation="org.elixir_lang.mix.runner.MixRunner" />
    <configurationType implementation="org.elixir_lang.mix.runner.MixRunConfigurationType" />

    <colorSettingsPage implementation="org.elixir_lang.ElixirColorSettingsPage"/>
    <fileTypeFactory implementation="org.elixir_lang.ElixirFileTypeFactory"/>

    <!-- for template -->
    <internalFileTemplate name="Elixir Module"/>
    <internalFileTemplate name="Elixir Application"/>
    <internalFileTemplate name="Elixir Supervisor"/>
    <internalFileTemplate name="Elixir GenServer"/>
    <internalFileTemplate name="Elixir GenEvent"/>

    <!-- for liveTemplates -->
    <defaultLiveTemplatesProvider implementation="org.elixir_lang.templates.ElixirLiveTemplateProvider"/>
    <liveTemplateContext implementation="org.elixir_lang.templates.ElixirContextType"/>
    <!-- end liveTemplates -->

    <annotator implementationClass="org.elixir_lang.annonator.Kernel" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.ModuleAttribute" language="Elixir"/>
    <gotoSymbolContributor implementation="org.elixir_lang.navigation.GotoSymbolContributor"/>
    <lang.commenter language="Elixir" implementationClass="org.elixir_lang.ElixirCommenter"/>
    <lang.findUsagesProvider language="Elixir" implementationClass="org.elixir_lang.FindUsagesProvider"/>
    <lang.foldingBuilder language="Elixir" implementationClass="org.elixir_lang.psi.FoldingBuilder"/>
    <lang.namesValidator language="Elixir" implementationClass="org.elixir_lang.psi.module_attribute.NamesValidator"/>
    <lang.parserDefinition language="Elixir" implementationClass="org.elixir_lang.ElixirParserDefinition"/>
    <lang.psiStructureViewFactory language="Elixir" implementationClass="org.elixir_lang.structure_view.Factory"/>
    <lang.refactoringSupport language="Elixir" implementationClass="org.elixir_lang.refactoring.SupportProvider"/>
    <lang.syntaxHighlighterFactory key="Elixir" implementationClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>
    <localInspection displayName="Ambiguous nested calls" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesManyStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesManyStrict"/>
    <localInspection displayName="Ambiguous parentheses" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesStrict"/>
    <localInspection displayName="Keywords Not At End" enabledByDefault="true"
                     groupName="Elixir" implementationClass="org.elixir_lang.inspection.KeywordsNotAtEnd"
                     language="Elixir" level="ERROR" shortName="KeywordsNotAtEnd"/>

    <stubIndex implementation="org.elixir_lang.psi.stub.index.AllName"/>
  </extensions>

  <application-components>
    <!-- Add your application components here -->
  </application-components>

  <actions>
    <group id="LangElixir.NewActions">
      <separator/>
      <action id="Elixir.NewFile" class="org.elixir_lang.action.CreateElixirModuleAction"
              text="Elixir File" description="Create new Elixir Module">
      </action>
      <separator/>

      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml" />
    </group>
  </actions>

</idea-plugin>
